-------------------------------------------------------------------------------------------------
-- PLAYLISTS_STRUCTURE
-------------------------------------------------------------------------------------------------
USE VideoHosting;

PRINT N'➕ TRIGGER JOB IS STARTED';

GO
CREATE or ALTER TRIGGER [REACTIONS_AFTER_INSERT] ON [REACTIONS]
AFTER INSERT AS
BEGIN
    DECLARE @IS_LIKED BIT;
    DECLARE @USER_UID UNIQUEIDENTIFIER;
    DECLARE @VIDEO_UID UNIQUEIDENTIFIER;
    DECLARE @PLAYLIST_UID UNIQUEIDENTIFIER;
    DECLARE @LIKED_PLAYLIST_TITLE NVARCHAR(50) = N'Liked';
    DECLARE @ACCESS_UID UNIQUEIDENTIFIER = (SELECT [UID] FROM [ACCESS_LEVELS] WHERE [TITLE] = N'Private');

    SELECT 
        @USER_UID = [USER_UID],
        @IS_LIKED = [IS_LIKED],
        @VIDEO_UID = [VIDEO_UID]
    FROM INSERTED;

    IF (@IS_LIKED = 0)
        RETURN;
    
    SET @PLAYLIST_UID = (SELECT [UID] FROM [PLAYLISTS] WHERE [TITLE] = @LIKED_PLAYLIST_TITLE AND [USER_UID] = @USER_UID);
    IF NOT EXISTS (SELECT 1 FROM [PLAYLISTS] WHERE [UID] = @PLAYLIST_UID)
    BEGIN
        SET @PLAYLIST_UID = NEWID();
        INSERT INTO [PLAYLISTS] ([UID], [USER_UID], [ACCESS_UID], [TITLE], [DESCRIPTION])
            VALUES (@PLAYLIST_UID, @USER_UID, @ACCESS_UID, @LIKED_PLAYLIST_TITLE, N'Automatic playlist');
    END;
    INSERT INTO [FK_VIDEO_PLAYLISTS] ([VIDEO_UID], [PLAYLIST_UID])
        VALUES (@VIDEO_UID, @PLAYLIST_UID);
END;
GO
PRINT N'➕ REACTIONS [ AFTER INSERT ] CREATED';


GO
CREATE or ALTER TRIGGER [REACTIONS_AFTER_UPDATE] ON [REACTIONS] 
AFTER UPDATE AS
BEGIN
    IF UPDATE(IS_LIKED) BEGIN
        RETURN;
    END;
    DECLARE @IS_LIKED BIT;
    DECLARE @USER_UID UNIQUEIDENTIFIER;
    DECLARE @VIDEO_UID UNIQUEIDENTIFIER;
    DECLARE @PLAYLIST_UID UNIQUEIDENTIFIER;
    DECLARE @LIKED_PLAYLIST_TITLE NVARCHAR(50) = N'Liked';
    DECLARE @ACCESS_UID UNIQUEIDENTIFIER = (SELECT [UID] FROM [ACCESS_LEVELS] WHERE [TITLE] = N'Private');
 
    SELECT 
        @IS_LIKED = [IS_LIKED],
        @VIDEO_UID = [VIDEO_UID],
        @USER_UID = [USER_UID]
    FROM INSERTED;
    
    IF (@IS_LIKED = 0) BEGIN
        DELETE FROM [FK_VIDEO_PLAYLISTS] WHERE [VIDEO_UID] = @VIDEO_UID
            AND [PLAYLIST_UID] = (SELECT [UID] FROM [PLAYLISTS] WHERE [TITLE] = @LIKED_PLAYLIST_TITLE  AND [USER_UID] = @USER_UID);
        RETURN;
    END;

    SET @PLAYLIST_UID = (SELECT [UID] FROM [PLAYLISTS] WHERE [TITLE] = @LIKED_PLAYLIST_TITLE AND [USER_UID] = @USER_UID);
    IF NOT EXISTS (SELECT 1 FROM [PLAYLISTS] WHERE [UID] = @PLAYLIST_UID)
    BEGIN
        SET @PLAYLIST_UID = NEWID();
        INSERT INTO [PLAYLISTS] ([UID], [USER_UID], [ACCESS_UID], [TITLE], [DESCRIPTION])
            VALUES (@PLAYLIST_UID, @USER_UID, @ACCESS_UID, @LIKED_PLAYLIST_TITLE, N'Automatic playlist');
    END;
    
    INSERT INTO [FK_VIDEO_PLAYLISTS] ([VIDEO_UID], [PLAYLIST_UID])
        VALUES (@VIDEO_UID, @PLAYLIST_UID);
END;
GO
PRINT N'➕ REACTIONS [ AFTER UPDATE ] CREATED';


GO
CREATE or ALTER TRIGGER [REACTIONS_AFTER_DELETE] on [REACTIONS] 
AFTER DELETE AS
BEGIN
    DECLARE @VIDEO_UID UNIQUEIDENTIFIER;
    DECLARE @USER_UID UNIQUEIDENTIFIER;
    DECLARE @LIKED_PLAYLIST_TITLE NVARCHAR(50) = N'Liked';    
    
    SELECT 
        @VIDEO_UID = [VIDEO_UID],
        @USER_UID = [USER_UID]
    FROM DELETED;

    DELETE FROM [FK_VIDEO_PLAYLISTS] WHERE [VIDEO_UID] = @VIDEO_UID
        AND [PLAYLIST_UID] = (SELECT [UID] FROM [PLAYLISTS] WHERE [TITLE] = @LIKED_PLAYLIST_TITLE AND [USER_UID] = @USER_UID);
END;
GO
PRINT N'➕ REACTIONS [ AFTER DELETE ] CREATED';
